(in-package :ved)

(defvar *state* nil)

(defun main-loop (file)
  (with-lexer (lexer 'ved-lexer (uiop:read-file-string file) :source file)
    (with-token-reader (token-reader lexer)
      (parse-program token-reader))))

(defun parse-program (next-token)
  (loop for tok = (multiple-value-list (funcall next-token))
	until (eql (car tok) nil)
	do (error-checker (parse-sexpr tok next-token)))
  (when (not (null *state*))
    (error "Syntax error. Unmatched closing parenthesis")))

(defun parse-sexpr (tok next-token)
  (push :sexpr *state*)
  (let ((ret-val nil))
    (case (car tok)
      (:string  (setq ret-val (parse-string tok)))
      (:integer (setq ret-val (parse-number tok)))
      (:float   (setq ret-val (parse-float tok)))
      (:symbol  (setq ret-val (parse-symb tok)))
      (:lparen  (setq ret-val (parse-list next-token)))
      (t        (return-from parse-sexpr nil)))
    (pop *state*)
    (return-from parse-sexpr ret-val)))

(defun parse-number (tok)
  (make-instance 'int-num :value (second tok)))

(defun parse-float (tok)
  (make-instance 'float-num :value (second tok)))

(defun parse-symb (tok)
  (make-instance 'symb :value (second tok)))

(defun parse-string (tok)
  (make-instance 'str :value (second tok)))

(defun parse-list (next-token)
  (push :list *state*)
  (let ((ret-val nil))
    (loop for new-tok = (multiple-value-list (funcall next-token))
	  until (eql (car new-tok) :rparen)
	  if (eql (car new-tok) nil) do
	    (error "Syntax error. Unmatched opening parenthesis")
	  do (push (parse-sexpr new-tok next-token) ret-val))
    (pop *state*)
    (make-instance 'lst :value (nreverse ret-val))))


(defun error-checker (program)
  (when (typep program 'lst)
    ;; (when (not (typep (car (value program)) 'symb))
    ;;   (error (format nil "Illegal function call")))
    (when (typep (car (value program)) 'symb)
	(cond
	  ((string-equal (value (car (value program))) "define")
	   (check-defun program))
	  ((string-equal (value (car (value program))) "let")
	   (check-let program))
	  ((string-equal (value (car (value program))) "if")
	   (check-if program))
	  ((string-equal (value (car (value program))) "cond")
	   (check-cond program))
	  ((string-equal (value (car (value program))) "for")
	   (check-for program))
	  ((string-equal (value (car (value program))) "while")
	   (check-while program))
	  (t (print "funcall"))))
    (return-from error-checker t))
  (when (typep program 'symb)
    (print "var-eval")
    (return-from error-checker t)))

(defun check-defun (program)
  (when (not (typep (second (value program)) 'symb))
    (error (format nil "'~a' is not a legal function name" (value (second (value program))))))
  (if (not (typep (third (value program)) 'lst))
      (error "Missing arguments list in function declaration")
      (loop for tok in (value (third (value program)))
	    if (not (typep tok 'symb)) do
	      (error (format nil "Illegal token '~a' in function arguments" (value tok))))))

(defun check-let (program)
  (if (string-equal (value (second (value program))) "mut")
      (when (not (typep (third (value program)) 'symb))
	(error (format nil "'~a' is not a legal variable name" (value (third (value program))))))
      (when (not (typep (second (value program)) 'symb))
	(error (format nil "'~a' is not a legal variable name" (value (second (value program))))))))

(defun check-if (program)
  (when (> (length (value program)) 4)
    (error (format nil "Too many arguments in 'if' call"))))

(defun check-cond (program)
  (loop for tok in (cdr (value program))
        if (not (typep tok 'lst)) do
	  (error (format nil "S-expression expected."))))

(defun check-for (program)
  (when (not (typep (second (value program)) 'symb))
    (error (format nil "Invalid loop variable name '~a'" (value (second (value program))))))
  (when (or (not (typep (third (value program)) 'symb))
	    (not (string-equal (value (third (value program))) "in")))
    (error (format nil "Missing 'in' keyword in for loop")))
  (when (not (member (type-of (fourth (value program))) '(symb lst)))
    (error (format nil "Invalid iteration container '~a'" (value (fourth (value program)))))))

(defun check-while (program)
  (when (not (member (type-of (second (value program))) '(symb lst)))
    (error (format nil "Invalid iteration condition '~a'" (value (second (value program)))))))
